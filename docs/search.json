[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "An R Guide For Pols 3800",
    "section": "",
    "text": "Who is This For?\nThis guide was initially compiled for my Introduction to Political Science Research class however this book is really for anybody who is looking to get started in R and R Studio. The guide itself was to put it mildly a little chaotic and somewhat difficult to navigate. So this is my attempt to correct that. The goal of this guide is to provide a summary of the things that helped me and add some of my own flare. By no means is this meant to be a definitive guide to R. Hopefully it is just a gentle guide and a potential reminder of things you already know, or an introduction to things you did not know that R could do.\nThis “book” requires a significant amount of attribution to a ton of people. In particular Much of the content is based on https://github.com/uo-ec607/lectures by Dr. Grant McDermott, https://talks.andrewheiss.com/2021-seacen/01-tidyverse.html by Dr. Andrew Heiss as well as just general knowledge dispensed from his blog and peppering him with questions, and Graphic Design with ggplot2 by Dr. Cédric Scherer. I highly recommend that you check out these sources! As it stands right now I need to go back through and add attribution to the individual chapters. Most of this “book” is me just translating R into how I think and what helped me learn R.\n\n\nPep talk\n\n\n\n\n\n\nImportant\n\n\n\n“There is no way of knowing nothing about a subject to knowing something about a subject without going through a period of much frustration and suckiness… Push through. You’ll suck less”\n\nHadley Wickham, author of ggplot2\n\n\n\nI sucked at this initially. We all sucked at this initially. You will often miss a comma somewhere, and your code will not run. You will be puzzled why something is not working and get frustrated and not know why your code is running and why somebody else’s code is running to find out later you misspelled something. I generated a ton of errors just compiling this guide. You eventually get better at figuring out the likely culprits and more carefully looking at your code. This is just something that comes with practice.\n\n\n\n\n\nIt is 100% okay to Google stuff when working on your analysis, problem sets, . We all do it! If I run into an issue, I do not know how to fix I immediately google it. Remember, the goal of this class is to teach you how to do research R is a minor part in the grand scheme of things when you are doing research. My goal is to teach you how to conduct research, not to make you a computer scientist or R developer.\n:::"
  },
  {
    "objectID": "working-directories.html#working-directories",
    "href": "working-directories.html#working-directories",
    "title": "1  Before We Get to The Fun Stuff",
    "section": "1.1 Working Directories",
    "text": "1.1 Working Directories\nWhat is a working directory? Working directories are essentially the internal gps of the computer. You know(generally) where the stuff on your computer is you navigate by clicking on stuff and voila you found your stuff. Underneath the hood your computer is finding stuff by navigating along the working directory. On my computer to get to this R guide I click on my teaching folder, then I click on the Administrative Stuff folder, and then I click on the R-guide.qmd or R-guide.html file. This is what that process looks like for the computer\n\ngetwd() # this is the working directory for the r guide\n\n[1] \"/Users/josh/Library/CloudStorage/Dropbox/pols-3800\"\n\n\nEach / is essentially a click until you get to the final destination.\nHeuristically you can think of it like this.\n\n\n\n\n\n\nYou can put a box inside a box.\n\nThis means folders can contain other folders.\nWhen you put a folder inside another folder this is called creating a subdirectory\n\nYou can put a cat inside a box\n\nThis means you can put a file inside a folder.\n\nYou can put a cat inside a box inside of a box\n\nThis means you can put a file inside a folder inside another folder\n\nYou cannot put a box inside a cat\n\nYou cannot put a folder inside a document(thats not how computers work)\n\nYou cannot put cat in a cat\n\nThis means you cannot put files inside other files. Admittedly this is where the metaphor breaks down.\n\n\nSo to include the cat pictures in this guide, I stored it in a folder called figs so to tell R to navigate to the picture, I do something like this.\n# how you navigate to folders on mac\n![](figs/cats-boxes.png) # this one way to include pics in a markdown doc\n\nThe / is you telling the computer that within the figs folder, there is a file I want you to include named cats-boxes.png. Windows does this slightly differently by doing something like\n![](figs\\cats-boxes.png)\nTo manually set your working directory you do this\n\nsetwd(\"path/to/your/files\") # mac and linux\nsetwd(\"path\\to\\your\\files\") # windows"
  },
  {
    "objectID": "working-directories.html#working-in-projects",
    "href": "working-directories.html#working-in-projects",
    "title": "1  Before We Get to The Fun Stuff",
    "section": "1.2 Working in Projects",
    "text": "1.2 Working in Projects\nHowever, working in R projects is best practice for various reasons. A projected-oriented workflow starts you off with a clean slate, so problem set 0 stuff is not still loaded. It also prevents you from constantly having to set the working directory.\n\n\n\n\n\nWhen you start working on a problem set click on the .Rproj file. This will open up RStudio, and you should be ready to go!\nTo open a new project open R-Studio. In the top left you will see something that looks like a blank page. If you look to the right there is an R with a + and like a weirdish blue background. Click on that and you should see a menu that looks like.\n\nFor your final projects you are going to want to click new directory, then click new project. You should be looking at a menu that looks like this\n\nIn the directory name portion put in an informative name like Final-Project or ggplot lab. If you look at the bottom of the box you will notice that it will place the folder in my Dropbox folder. If you click on browse you can can change where the folder is put on your computer.\nI strongly recommend you create a dedicated folder for your porjects instead of keeping everything on your desktop or downloads folder"
  },
  {
    "objectID": "working-directories.html#zip-files",
    "href": "working-directories.html#zip-files",
    "title": "1  Before We Get to The Fun Stuff",
    "section": "1.3 Zip Files",
    "text": "1.3 Zip Files\nTo keep everything together in the same working directory I distribute the problem sets as Zip files. You will likely encounter these at some point in your professional life. If you want to send a folder via email to your boss or your direct reports that has lots of stuff like images than the chances are that you will have to send a Zip file because Outlook has a max file size of 33mb which is next to nothing. So it is worth spending a little time on how to unzip a file.\n\n1.3.1 Mac\nFortunately for Mac users this is really easy. When you click download you will see something that looks like this\n\nDouble click on the downloaded .zip file. macOS will automatically create a new folder with the same name as the .zip file, and all the file’s contents will be inside. Double click on the RStudio Project file (.Rproj) to get started.\n\n\n1.3.2 Windows\nFor Windows users this process is a bit more involved for reasons that are unclear to me. This can be at best an inconvenience at worst it can result in you doing all your work trying to save it and it disappearing into the abyss. One of the things that makes this incredibly confusing is that when you download the zip file it looks like a regular folder.\n\nYou can click around in it and even edit files within the zip file! Here’s what it looks like—the only clues that this folder is really a .zip file are that there’s a “Compressed Folder Tools” tab at the top, and there’s a “Ratio” column that shows how much each file is compressed. All your hard work will be gone because it is saved in some temp directory that will take ages to find and likely not work all that well.\nYou most likely won’t be able to open any data files or save anything, which will be frustrating.\nInstead, you need to right click on the .zip file and select “Extract All…”:\n\n\n\n\n\nThen choose where you want to unzip all the files and click on “Extract”\n\n\n\n\n\nYou should then finally have a real folder with all the contents of the zipped file. Open the R Project file and RStudio will point to the correct working directory and everything will work."
  },
  {
    "objectID": "01-installing-R-Rstudio.html#r-tools-and-xcode",
    "href": "01-installing-R-Rstudio.html#r-tools-and-xcode",
    "title": "2  Installing R",
    "section": "2.1 R Tools and XCode",
    "text": "2.1 R Tools and XCode\nOccasionally some of the packages we will use may not be available for your version of R. This is not a problem since many package writers have the code online and we need to download them. This does require we have some additional things on our computer.\n\nWindowsMacOS\n\n\n\n\n\n\n\n\nRequired Step\n\n\n\nFor some of the packages we will need we may need to have some additional things installed in order for it to work.\n\n\nIf you are on a Windows operating system, you will need to install Rtools 4.3 which can download by clicking on the hyperlink below. Rtools is required to install packages from source and, more importantly, anything that requires a C++ compiler.\n\nDownload Rtools 4.3\n\n\nOnce again, during the installation process you can just leave things at their default settings, especially in the case of the installation directory since changing its default locations may result in errors during package compilation. After you have completed this step, you will need to install the required packages by running the code below in order to successfully render the Quarto document for problem set 0. If you encounter errors when rendering the document, please ensure you have these packages installed.\n\n\n\n\n\n\n\n\n\nRequired Step\n\n\n\nFor some of the packages we will need we may need to have some additional things installed in order for it to work. This is a required step for much of the code we will use throughout this course.\n\n\nIf you are on a MacOS operating system, you will need to install the Xcode developer tools. You can obtain the full MacOS development environment from the Apple AppStore using the link below. Xcode is required to install packages from source and, more importantly, anything that requires a C++ compiler, including though not limited to Stan.\n\nDownload Xcode from the AppStore\n\n\nHowever, since downloading this can be extremely time consuming given the large size of the full development tools suite an alternative option is to install a paired down version that provides the tools necessary for our purposes in this course without the overhead of the full Xcode development environment. You can install the paired down version of Xcode by running the code below in the RStudio console. Just copy and paste and hit enter.\n\n## MacOS Users may need to install the rstudioapi manually first\ninstall.packages(\"rstudioapi\")\n\n## Run the command to install xcode-select\nrstudioapi::terminalExecute(\n  command = \"xcode-select --install\"\n)"
  },
  {
    "objectID": "01-installing-R-Rstudio.html#quarto",
    "href": "01-installing-R-Rstudio.html#quarto",
    "title": "2  Installing R",
    "section": "2.3 Quarto",
    "text": "2.3 Quarto\nIf you have read through the course syllabus you will notice that I am having you work in something called Quarto. You may be asking your self what is Quarto I have only used MS Word. Quarto embraces something called literate programming. Essentially what this means is that words and code appear side by side. This guide was created in Quarto and what I use the most. Since we are going to produce lots of graphs and tables in this class the typical workflow for that would look something like this\n\n\n\n\n\nCredit for this image goes to Bruno Rodrigues\n\n\n\n\nThis involves lots of work for yourself. If you are doing a data analysis project where you produce 5 plots each time you make minor changes to those plots you are going to have to remember where those plots are, copy and paste them over, resize them or reformat them. This gets infinitely more annoying if you are reporting numbers in tables or in text. In some cases data analysis teams are constantly updating reports for stake holders based on new data. So if you have a report that says our “based on our model we would expect an increase of 8 blah blahs” and later you rerun the analysis cuz there was new data or you notice a mistake you have to figure out where exactly you said “8 blah blahs” and switch them.\nIn Quarto this process is a whole lot easier. The loop looks like this\n\n\n\n\n\nCredit for this image goes to Bruno Rodrigues\n\n\n\n\nYou are changing the code for your figures in the document itself. So any changes are going to appear in the document automatically! You can also use code inline to automatically update numbers!\n\ndata &lt;- 1:100\n\navg &lt;- mean(data)\n\nThe average for our data is 50.5. In the document it looks like this\n\n```{r}\ndata &lt;- 1:100\n\navg &lt;- mean(data)\n\n```\n\nThe average of our data is `r avg`\nYou may have noticed that our data only goes from 1 to 100. We can make a quick modification and the document will update the document accordingly without any copy and pasting!\n\ndata &lt;- 1:1000\n\navg &lt;- mean(data)\n\nThe average of our data is 500.5"
  },
  {
    "objectID": "01-installing-R-Rstudio.html#navigating-rstudio",
    "href": "01-installing-R-Rstudio.html#navigating-rstudio",
    "title": "2  Installing R",
    "section": "2.3 Navigating Rstudio",
    "text": "2.3 Navigating Rstudio\n\n2.3.1 R? Rstudio? Whats the Difference?\n\nR is a statistical programming language\nRStudio is a convenient interface for R (an Integrated Developer Environment, IDE)\nAt its simplest:\n\nR is like a car’s engine\nRStudio is like a car’s dashboard\n\n\n\n\n\n\n\nThe most common way that we interact with R is through Rstudio you can technically run R by just opening R and typing in code. But most people do not do this. It is not especially friendly to work in there is no syntax highlighting no code completetion. There isnt even really an option to add keyboard shortcuts. It is kind of like a Formula 1 car it can go real fast but it is not a comfortable drive.\nRstudio has lots of handy features that help you. Much like a car you and I would drive. If we didn’t have the dashboard but still had the engine and some wheels and a steering we could drive the car if needed. However a car with a dashboard lets us figure out what the car is doing more easily.\n\n\n2.3.2 Navigating RStudio\nWhen you open up Rstudio it should look something like this.\n\n\n\n\n\nIt is worth briefly walking through each pane. The code can go here part is called the console. If you just start typing R code and hit enter it will run. The imported data shows up here lets us peak at our Global Environment. This is where stuff we need/worked on shows up. Project files are here in the bottom right actually has a lot of panes there. The first one called files lets us peak at all the files in the folder that R is pointed at. The second pane packages lets us look at all the packages we have installed(more on this later). Plots lets us preview plots we have made.\nMost of the time we don’t enter code directly into the console. If we just enter code into the console we do not have a record of what we did! This is a bad workflow for lots of reasons! At a minimum you are making your life a whole lot more difficult because you will have to redo everything every single time. That is way more work for yourself. If you click on the little white page at the top left you will see something that looks like this.\n\n\n\n\n\n\n\n\n\nThis is a fairly standard way to store your code! This is a record of everything you did which is really important because it saves you time. Just as importantly it lets your colleagues see what you did to the data. If we don’t know what you did than it is hard to know where things are going wrong or if what you did matches what you said.\n\n\n\n\n\nIf you opened an R script than it should look something like this. If you highlight the code and hit cmd + enter on a Mac or ctrl + enter if you are on a Windows then it will run the code for you!\nNow that you have R Studio and R all set lets get started on the basics of R!"
  },
  {
    "objectID": "02-r-basics.html#r-as-a-fancy-calculator",
    "href": "02-r-basics.html#r-as-a-fancy-calculator",
    "title": "3  Basics of R",
    "section": "3.1 R as a fancy calculator",
    "text": "3.1 R as a fancy calculator\nGood news you never have to buy a TI-84 again you can use R as a fancy calculator.\n\n2+2 ## addition\n\n[1] 4\n\n4-2 ## subtraction\n\n[1] 2\n\n600*100 ##multiplication\n\n[1] 60000\n\n100/10 ##division\n\n[1] 10\n\n10*10/(3^4*2)-2 ## Pemdas \n\n[1] -1.382716\n\nlog(100) # takes the log of 100\n\n[1] 4.60517\n\nsqrt(100) # sqrt of 100\n\n[1] 10\n\n\nHowever, if we want to reuse stuff we need to assign them to an object. This applies for all the numbers we calculated above and datsets you read in! This is somewhat unintuitive if you have never worked with an object oriented program. However, you will eventually get the hang of it!"
  },
  {
    "objectID": "02-r-basics.html#objects",
    "href": "02-r-basics.html#objects",
    "title": "3  Basics of R",
    "section": "3.2 Objects",
    "text": "3.2 Objects\n\n3.2.1 Objects and Assignment\nIn the installation chapter I showed did some assigning without really telling you, but now it is time to explain what is going on. R is what is known as an object oriented programming language (OOP), meaning that everything in R is an “object.” This is useful for understanding the concept of assignment, or how we specify certain objects in memory so we can use them elsewhere in a script. Values need to be assigned to objects using the assignment operator &lt;-, &lt; followed by -, and then on the right side you tell R what goes in that object. This can be as simple as specifying a calculation such as 4 + 4 or passing numeric values to a function such as sum(9, 6).\n\n\n\n\n\n\nTip\n\n\n\nThe keyboard shortcut for &lt;- is alt + -\n\n\n\nnumbs &lt;- 4 + 4 \n\nchars &lt;- \"hello world\"\n\nnumbs2 &lt;- 3*3\n\nnumbs + numbs2\n\n[1] 17\n\n\nWhen we assign things the resulting values are not returned so we can “print” the object explicitly using print or referring to it by name.\n\nprint(numbs)\n\n[1] 8\n\nchars \n\n[1] \"hello world\"\n\n\nOne fairly common error you will run into in R is something along this line.\n\nchars_two &lt;- \"Tell Cersei it was me\"\n\ncharstwo\n\nError in eval(expr, envir, enclos): object 'charstwo' not found\n\n\nWhile this is a fairly minor typo if we look at the global environment we will get a hint.\n\nWhen we asked R to print charstwo it is going to look in the global environment for something called charstwo to print and if it can’t find it then R will give up. We don’t have anything called charstwo but we do have something called chars_two. We know what we meant when we made the typo, but the computer does not! Computers are really good at doing things, but they require really explicit instructions so if we type chars_two it will work.\n\nchars_two\n\n[1] \"Tell Cersei it was me\"\n\n\nOne way to make life a little bit is have a consistent naming convention! This will generally help you because you will develop some tendencies. However, this is an error we all still get because it is easy to forget what all your objects are named. You can either look at your global environment or scroll up and see what past you named the object.\n\n\n3.2.2 Naming Objects in R\nThe best practice is to use concise descriptive names.\nWhen loading in data typically I do raw_my_dataset_name and after data all of my cleaning I do clean_my_dataset_name\n\nObjects must start with a letter. But can contain letters, numbers, _, or . There are a few different naming conventions that people use.\n\nsnake_case_like_this_is_what_I_use\nsomePeopleUseCamelCase\nsome_People.are_Do_not.like_Convention1\n\n\n\n\n3.2.3 Things we can never name stuff in R\n\nif/elsefor/whilefunctionTRUE/FALSENULLInf/-InfNaNNA\n\n\nif used when something meets a certain condition the code will do something. else is used when the if condition is not met\n\n\nfor is how we construct something called a for loop. while is used to construct something called a while loop. These are ways to repeat the same task over and over again and are building blocks of packages in R.\n\n\nHow we specify user defined functions. This is building block of programming in R\n\n\nLogical constants in R\n\n\nis returned when an expression or function results in an undefined value\n\n\nThis is way R represents you doing something mathematically impossible like 1/0 or log(0)\n\n\nThis is a way R represents you doing something mathematically impossible like 0/0. NaN stands for not a real number\n\n\nThis is the most common way that R represents missing values\n\n\n\n\n\nSometimes you will run into names that do not follow naming conventions so if you name something my object name R will get mad about it so you have you use two ` (the key right beside 1) like this.\n\n`my object name`"
  },
  {
    "objectID": "02-r-basics.html#types-of-objects-in-r",
    "href": "02-r-basics.html#types-of-objects-in-r",
    "title": "3  Basics of R",
    "section": "3.3 Types of Objects in R",
    "text": "3.3 Types of Objects in R\nBefore we can proceed to a functional programming framework, however, it is first necessary to introduce the basic data structures you will encounter in R. These include, though are not limited to data frames, factors, vectors, lists, and functions. In this section we will spend a brief amount of time introducing data structures with a focus on vectors, data frames, lists, and functions in particular.\n\n3.3.1 Vectors\nIf you look at our example, we are kind of repeating ourselves. What we can do is to create what is called a vector using c which will smash the numbs vector together. Vectors have lots of uses in R and can make your life a lot easier. A vector comes in two flavors we will focus on one of the two main types.\n\nmy_vec &lt;- c(numbs, numbs2)\n\nmy_vec\n\n[1] 8 9\n\nmy_other_vec &lt;- c(1:100)\n\nmy_other_vec\n\n  [1]   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18\n [19]  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35  36\n [37]  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53  54\n [55]  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71  72\n [73]  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89  90\n [91]  91  92  93  94  95  96  97  98  99 100\n\n\nThis is called an atomic vector. This is just computer science, for everything in the vector is the same class. The class of an object tells you what you can do and cannot do to stuff. To get the class of a vector, you do something like this\n\nclass(my_vec)\n\n[1] \"numeric\"\n\nclass(my_other_vec)\n\n[1] \"integer\"\n\n\nSince this is a numeric variable we can do some math stuff to it. For example we stored 8 in a vector called numbers. Lets add 8 to each number in my_other_vec.\n\nnumbs + my_other_vec\n\n  [1]   9  10  11  12  13  14  15  16  17  18  19  20  21  22  23  24  25  26\n [19]  27  28  29  30  31  32  33  34  35  36  37  38  39  40  41  42  43  44\n [37]  45  46  47  48  49  50  51  52  53  54  55  56  57  58  59  60  61  62\n [55]  63  64  65  66  67  68  69  70  71  72  73  74  75  76  77  78  79  80\n [73]  81  82  83  84  85  86  87  88  89  90  91  92  93  94  95  96  97  98\n [91]  99 100 101 102 103 104 105 106 107 108\n\n\nWe can get the sum of the entire vector using the sum function\n\nsum(my_other_vec)\n\n[1] 5050\n\n\nWe can do this because these vectors have a class of numeric. What would happen if we added our chars vector to our numbs vector?\n\nchars + numbs \n\nError in chars + numbs: non-numeric argument to binary operator\n\n\nHopefully this error makes sense intuitevly. If we were in class and I asked you to find the answer to 8  + hello world you would rightfully be really confused. This is essentially what is going on with R.\nYou can construct vectors with different kinds of stuff but it will lead to some strange behavior.\n\nexamp_weird &lt;- c(1:4, \"Cat\", \"dog\", 5)\n\nclass(examp_weird)\n\n[1] \"character\"\n\n\nThe best-case scenario is R gives up. The worst case is that R will go about its day, and you do not even realize something is wrong. DO NOT MIX ClASSES in these kinds of vectors.\n\n\n3.3.2 What other kinds of classes are there in R?\nThe main classes you will work with in R are listed below.\n\nNumeric: Can contain whole numbers or decimals\nLogicals: Can only take two values TRUE or FALSE\nFactors: Can only contain predefined values. Used to store categorical data\nOrdered factors are special kind of factor where the order of the level matters.\nCharacters: Holds character strings\n\nBase R will often convert characters to factors. That is bad because it will choose the levels for you\n\n\n\n\n3.3.3 Data Frames\nAmong the most common data structures you will encounter in R, at least in this course’s context, is a tabular data format called data frames. Data frames are simply collections of vectors or, in perhaps more familiar terms, data frames in R are similar to spreadsheets in Microsoft Excel. Data frames are a special kind of list where you can hold multiple classes together, but each vector must be of the same length. Length is how much stuff is in it. You can find the length of something in R like this\n\nlength(my_vec)\n\n[1] 2\n\n\nLet’s see what happens if we try and create a data frame with differing lengths.\n\nmy_data &lt;- data.frame(id = letters,\n                      effect = 1:4)\n\nError in data.frame(id = letters, effect = 1:4): arguments imply differing number of rows: 26, 4\n\n\nIt gets mad because data frames have to have the same length.\n\nmy_data &lt;- data.frame(id = letters,\n                      effect = 1:26)\n\nhead(my_data) # this just prints the first 5 rows\n\n  id effect\n1  a      1\n2  b      2\n3  c      3\n4  d      4\n5  e      5\n6  f      6\n\n\n\n\n3.3.4 Functions\nThis is just how we do stuff to objects in R. I will not have you write your own function but you will work with them frequently enouch that it might be helpful to understand how they work. In R, functions are defined sets of actions that perform a specific task these are often tasks that are repetitive. Since R does not have a division function lets just create one.\n\n# divide some stuff\ndivide &lt;- function(x, y) {\n out &lt;- x/y\n\nreturn(out)\n}\n\ndivide(x = 200, y = 100)\n\n[1] 2\n\n\nThe function is defined by two arguments, x and y. Inside the function x is being divided by y, then assigned to a temporary object called out then we are printing it to the console using return. Every function you run into in R takes a series of arguments. For some functions the list is quite extensive others can take one or even two arguments.\n\n# this is a really simple function with one argument\n\nprinter &lt;- function(x){\n  print(x)\n}\n\nprinter(x = \"Cool\")\n\n[1] \"Cool\"\n\n\n\n\n3.3.5 Errors vs Warnings\nThroughout the course of the semester you will run into errors and warnings. This is a totally normal part of coding. The first thing we should do is differentiate between the two things.\n\nErrors: These are things that will legitimately not make your code run whether these are misspelled object names, missing commas, using incorrect classes in functions, etc…\nWarnings: These just mean your code will run but there are some caveats attached like ggplot dropping missing observations or missing values are introduced by coercing to a vector to a numeric type\n\nBoth of these serve very important functions in R. Lets say that we only want people to print characters with our printer functions. What we can do is stop them from doing that with well the stop function.\n\nprinter2 &lt;- function(x){\n  if(!isTRUE(is.character(x))){\n    stop(paste0(\"x should be of type 'character', but is of type '\", typeof(x), \"'instead\"))\n  }\n  else{\n    print(x)\n  }\n}\n\nprinter2(2)\n\nError in printer2(2): x should be of type 'character', but is of type 'double'instead\n\n\nNotice that 2 is not returned in the console.\nThis may be a bit aggressive so we could simply warn them that they didn’t supply characters to the function.\n\nprinter3 &lt;- function(x){\n  if(!isTRUE(is.character(x))){\n    warning(paste0(\"x should be of type 'character', but is of type '\", typeof(x), \"'instead\"))\n    print(x)\n  }\n  else{\n    print(x)\n  }\n}\n\nprinter3(2)\n\nWarning in printer3(2): x should be of type 'character', but is of type\n'double'instead\n\n\n[1] 2\n\n\nNotice that printer3 simply warns us that we should supply a character to our function, but returns 2 in the console. When we supply a character vector to our printer functions they will run with no warnings or errors\n\nprinter2(chars_two)\n\n[1] \"Tell Cersei it was me\"\n\nprinter3(chars_two)\n\n[1] \"Tell Cersei it was me\"\n\n\n\n\n3.3.6 Logicals and Booleans\nSometimes we need to work with data when they meet a certain condition. In our warnings and errors section what we did was test whether the input of our function was a character. R comes with a full set of logical and booleans.\n\n\n\n\nTest\n\n\nMeaning\n\n\nTest\n\n\nMeaning\n\n\n\n\nx &lt; y\n\n\nLess than\n\n\nx %in% y\n\n\nIn set\n\n\n\n\nx &gt; y\n\n\nGreater than\n\n\nis.na(x)\n\n\nIs missing\n\n\n\n\n==\n\n\nEqual to\n\n\n!is.na(x)\n\n\nIs not missing\n\n\n\n\nx &lt;= y\n\n\nLess than or equal to\n\n\n\n\n ! y\n\n\nNot\n\n\n\n\nx &gt;= y\n\n\nGreater than or equal to\n\n\n\n\nx != y\n\n\nNot equal to\n\n\n\n\nx | y\n\n\nOr\n\n\n\n\nx & y\n\n\nAnd\n\n\n\n\nYou should be fairly familiar with at least these 5.\n\n1 &gt; 2\n\n[1] FALSE\n\n1 &lt; 2\n\n[1] TRUE\n\n1 == 2 \n\n[1] FALSE\n\n1 &gt;= 2\n\n[1] FALSE\n\n1 &lt;= 2\n\n[1] TRUE\n\n\nThe reason we use == rather than = for equals kind of comes down to the fact that the = is used for argument evaluation and object assignment.\n\n\nThere are technically three ways to assign objects in R but the most commonly used is &lt;-. Personally I use the =. To keep this guide consistent with recommended style guides I have just decided to use the &lt;-.\nThe ones you are less familiar with may be these\n\n1 != 2\n\n1 &lt; 2 | 3 &gt; 4\n\n1 &lt; 2 & 3&gt;4\n\n4 %in% 1:10\n\nYou are likely familiar with the not equal sign \\(\\neq\\) in Boolean when we want to say something is not something we use the !. So if we want to test whether 1 is not equal to 2. We do this\n\n1 != 2 \n\n[1] TRUE\n\n\nTo test whether or not something is TRUE we use the | which is just shift + the key above the enter key. This will return TRUE if one side of the statement is true. So when we do\n\n1 &lt; 2 | 3 &gt; 4\n\n[1] TRUE\n\n\nIt will return true because 1 is less than two.\nSometimes we want to test whether both the left and right statement are true. So if we repeat this same excericse but swap out the | for the & it will return FALSE\n\n1 &lt; 2 & 3 &gt; 4\n\n[1] FALSE\n\n\nThis is because while 1 is less than 2 three is not greater than 4.\nThe last one looks a bit strange. What this is doing is seeing if the thing to the left of the %in% is inside the set of things on the right of the%in%`. So if we do this\n\n1:10\n\n [1]  1  2  3  4  5  6  7  8  9 10\n\n4 %in% 1:10\n\n[1] TRUE\n\n\nIt will return TRUE because we are defining a set of number. Defining sets also works with characters.\n\njoshs_fav_foods &lt;- c(\"Pizza\", \"Burgers\", \"Pho\", \"Wings\")\n\n\"beets\" %in% joshs_fav_foods\n\n[1] FALSE\n\n\nNotice that beets are not defined as one of my favorite foods. So it will return FALSE\n\n\n3.3.7 Indexing\nThat was a lot. The final thing that we will talk about in this section is indexing. Indexing is how we get to stuff in R. For your sake, you hope there is a point-and-click way to do things. Unfortunately, there is not. However, indexing is relatively easy. So let’s return to our example data set.\nSince statisticians created R for well other statisticians we start indexing at 1 We index stuff in R using [], [[]], or $. These all have their place in R.\nFor [], it takes two arguments [rows I want to see, columns I want to see], we can feed names, positions, and tests to []\nWe will use the data.frame we defined earlier. Lets just take a look at the first 5 rows\n\nhead(my_data)\n\n  id effect\n1  a      1\n2  b      2\n3  c      3\n4  d      4\n5  e      5\n6  f      6\n\n\nLets just print the letter a to the console. Since the letter a is in the first row and the first column we do.\n\nmy_data[1,1]\n\n[1] \"a\"\n\n\nWe can use’:’ to expedite this process if we want to return multiple rows or columns.\n\nmy_data[1:2, 1]\n\n[1] \"a\" \"b\"\n\n\nWe can also use names.\n\nmy_data[, \"id\"]\n\n [1] \"a\" \"b\" \"c\" \"d\" \"e\" \"f\" \"g\" \"h\" \"i\" \"j\" \"k\" \"l\" \"m\" \"n\" \"o\" \"p\" \"q\" \"r\" \"s\"\n[20] \"t\" \"u\" \"v\" \"w\" \"x\" \"y\" \"z\"\n\n\n\nmy_data$effect \n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\n[26] 26\n\n\nFor the most part, we will be doing stuff with the $ but being aware of [] is important to know about because they are the building blocks of R. They will appear a lot in some people’s replication materials, and having some intuition about what is going on is helpful. For simple things like calculating the mean of a column this is quicker.\nIn this class I will have compute some summary statistics like the mean and standard deviation as well as some thinks like the correlation coefficient. The quickest way to do this is to use the $ to get the numbers you want. So if we wanted to get the mean of the effect column we would do this.\n\nmean(my_data$effect)\n\n[1] 13.5\n\n\n\n\n3.3.8 Asking For Help\nOne of the most fundamental things in R is figuring out how to ask for help. The quickest way is to use ?functionname where function name is just a stand in for all the R functions that are availbable. Lets say our dataset looked like this\n\nour_data &lt;- data.frame(values = c(1:5, NA),\n                       id = letters[1:6])\n\nHere values goes from 1-5 with a missing value. If we wanted to compute the mean we would do\n\nmean(our_data$values)\n\n[1] NA\n\n\nPresumably you thought the mean would be something like 3. Here it returns NA because it is really conservative when it comes to missing values in functions like mean. The data could be missing for a whole bunch of reasons in the real world but in this case we just want the mean without much thought about why that is. We can look at the help documentation like this\n\n?mean\n\nWhich will pop up this window in the help panel in the bottom right of Rstudio that looks like this.\n\n\n\n\n\nIf you look at the help documentation you may see an argument that says na.rm = FALSE that is telling mean how to handle missing values. na.rm = FALSE in regular human speak just reads as don’t remove missing values. So to get the numbers we wanted all we need to do is switch the na.rm = FALSE to na.rm = TRUE\n\nmean(our_data$values, na.rm = TRUE)\n\n[1] 3\n\n\n\n\nIf you do more complex mathy things like lm it will just delete the missing values which is not always great"
  },
  {
    "objectID": "02-r-basics.html#loading-and-installing-packages",
    "href": "02-r-basics.html#loading-and-installing-packages",
    "title": "3  Basics of R",
    "section": "3.4 Loading and installing packages",
    "text": "3.4 Loading and installing packages\nWhen you first open Rstudio you have some preloaded packages like mean. However, I will guarantee that when you start working with R more and you need to do more complex things you will have to use other functions. The tidyverse is not one of these packages that is loaded when you open Rstudio so copying and pasting the code from the knitted document will not work. That is because R does not have the instructions it needs to run those commands. To do this you have to download the package. Like with everything in R there are like a bajillion ways to do this. The first one is by using the packages window\n\nHere you just type in the name of the package and then click install. All that is doing is just running this code\n\ninstall.packages(\"ggplot2\")\n\nIf you want to install multiple packages what you can do is something like this.\n\ninstall.packages(c(\"ggplot2\", \"palmerpenguins\", \"MetBrewer\"))\n\nRemember how earlier I taught you how to define a vector? Well that is all we are doing here.\nOnce you install the packages you will not need to reinstall the package each time. However, these packages are just installed and not loaded. Unlike excel or other analysis software you have to explicitly tell R that you want to use a package. The way we do this is by library(packagename) like this\n\nlibrary(tidyverse)\n\nYou should always load the packages at the top of your script or quarto document. R executes things sequentially meaning it starts from line one and ends once it gets to the bottom of the script or there is an error.\n\nlibrary(palmerpenguins) # loads in the palmerpenguins data\n\n\nggplot(penguins, aes(x = body_mass_g)) +\ngeom_histogram()\n\nError in ggplot(penguins, aes(x = body_mass_g)): could not find function \"ggplot\"\n\nlibrary(ggplot2)\n\nggplot(penguins, aes(x = body_mass_g)) +\ngeom_histogram()\n\n\n\n\nNotice how the first set of code generates an error while the second set of code does not. This is because in the library(ggplot2) line we have told R to load in the ggplot instructions.\n\n\nOne thing you will notice is that once you install the package you do not need to put the package name in quotation marks. The reason why is due to the fact that R now recognizes the package as defined objects with given names.\nA standard R script/quarto document will have the instructions loaded at the top like this.\n\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nlibrary(MetBrewer)\n\nOne of the nice things about Rstudio is if you open somebody else’s R script or quarto document and they do something like library(packageIdonthave) Rstudio will ask if you want to install it."
  },
  {
    "objectID": "02-r-basics.html#footnotes",
    "href": "02-r-basics.html#footnotes",
    "title": "3  Basics of R",
    "section": "",
    "text": "Example and Discussion provided in R for Data Sciency by Hadley Wickham↩︎"
  },
  {
    "objectID": "quarto-basics.html#how-to-get-a-pdf",
    "href": "quarto-basics.html#how-to-get-a-pdf",
    "title": "4  Writing in Quarto",
    "section": "4.2 How to Get a PDF",
    "text": "4.2 How to Get a PDF\n\n4.2.1 Installing Quarto\nThe process is relatively straight forward. Just go to the Quarto website and click on the download button. This will install Quarto onto your machine so that is relatively straight forward!\nTo produce pdfs Quarto relies on something called \\(\\LaTeX\\). All you really need to know about \\(\\LaTeX\\) is that you need it to produce a PDF. To install LaTeX all you need to do is open an R script and copy and paste this code and run it and then type Y and hit enter.\n\nrstudioapi::terminalExecute(\n  command = \"quarto install tinytex\"\n)\n\nIt may prompt you to enter your password. This is just the password you use to log into your computer. Nothing will appear when you enter your password but your password is being entered. The reason your computer does this is for the same reason that websites do not display your password. This is installing a very minimal LaTeX distribution. After that is done you can now render PDFs.\nDo get the output we want we need to do some stuff in order to tell quarto what type of document we want. You add this information at the top of the document like you would with word. However, it looks a little bit different since it relies on YAML(Yet Another Markdown Language) to add in this info.1 Your YAML heading should look like this\ntitle: \"Quarto Guide\"\nauthor: \"Josh Allen\"\ndate:  \"08/21/23\"\nformat: pdf\nFrom there you can pass additional options to it like what the citation style, the citation engine, the kind of font you want to use etc. So it looks something like this.\ntitle: \"Quarto Guide\"\nauthor: \"Josh Allen\"\ndate: # \"08/21/23\" # this is to show you how to add the current date\nformat:\n  pdf:\n    toc: false # this turns off the table of contents\n    mainfont: \"Cochineal\" # the font I like\n    mainfontoptions: \n      - \"Numbers=Proportional\"\n      - \"Numbers=OldStyle\"\n    mathfont: \"Libertinus Math\"\n    indent: true\n    geometry: margin=1in # one inch margins \n    biblio-title: \"References\"\n    cite-method: biblatex\nfontsize: 12pt\nbibliography: ref.bib # specify the bib file \nbiblio-style: apsr # what style to choose"
  },
  {
    "objectID": "quarto-basics.html#using-quarto-to-write",
    "href": "quarto-basics.html#using-quarto-to-write",
    "title": "4  Writing in Quarto",
    "section": "4.3 Using Quarto to write",
    "text": "4.3 Using Quarto to write\nIf you work in the visual editor than lots of the stuff will be abstracted away. It should look somewhat familiar to a word\n\n\n\n\n\nLot of the same keyboard shortcuts should work! What changes is now you can insert executable code. The quickest way to do this is by doing cmd + alt/option + I on mac or ctrl + alt/option + I on a windows.\n\n4.3.1 Working with the Source Editor\nPersonally I do not really like working with the visual editor which may just be because I started using Rmarkdown when the visual editor was not very good. One thing to know is that you will have to learn some new syntax to write which is fine and you will eventually get the hang of it.\n\n\n4.3.2 Writing in line\nOften times we use italics, bold, or a mix of both to emphasize things. In word we would either click the button or in LaTex we would do \\textbf{something like this}. If you have learned LaTeX you can still do \\(\\textbf{this}\\) but you would need to wrap it in dollar signs $\\textbf{}$. Instead of doing all that what you can do is just take advantage of markdown syntax. In the table we can see how to do this\n\n\n\n\n\n\n\n\nMarkdown Syntax\nOutput\n\n\n\n\n\n*italics* and **bold**\nitalics and bold\n\n\n\n$superscript^2$ / $subscript_2$\n\\(superscript^2\\) / \\(subscript_2\\)\n\n\n~~strikethrough~~\nstrikethrough\n\n\n\n`verbatim code`\nverbatim code\n\n\n\n\nI have yet to come up with a good mneumonic device on how to remember the difference between italics and bold. Maybe some day.\n\n\n4.3.3 Code and Chunk options\nWhat differentiates Quarto from Word is the ability to embed code alongside words. To control how these appear in your document you need to add certain options to your code chunks. The most common thing you will want to do is stop the code from appearing in documents. For your problem sets or presenting to a more technical audience you will want to do this. We can do control that via echo. If we want people to see our code than we do #| echo: true like this\n```{r show-code}\n\n#| echo: true \nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\nggplot(penguins, aes(x = body_mass_g)) +\ngeom_histogram()\n```\nwhich produces\n\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\nggplot(penguins, aes(x = body_mass_g)) +\ngeom_histogram()\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\nIf we do not want to show our code than we just do #| echo: false`\n```{r show-code}\n\n#| echo: false \nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\nggplot(penguins, aes(x = body_mass_g)) +\ngeom_histogram()\n```\nwhich produces\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 2 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\nNotice how ggplot is warning us about the bin width we choose. To control this we just have to change our chunk options by adding #| warning: false\n```{r warning-example}\n\n#| echo: false \n#| warning: false\nlibrary(palmerpenguins)\nlibrary(ggplot2)\n\nggplot(penguins, aes(x = body_mass_g)) +\ngeom_histogram()\n```\nwhich produces\n\n\n\n\n\nSimilarly if we load in the tidyverse or a package with names of similarly named functions we will get warnings and messages like this\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ lubridate 1.9.2     ✔ tibble    3.2.1\n✔ purrr     1.0.2     ✔ tidyr     1.3.0\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nAgain all we need to do to omit this is just change the chunk options\n```{r message-example}\n#| message: false\n\nlibrary(tidyverse)\n\n```\nwhich produces\n\nlibrary(tidyverse)\n\nNotice how there is no big long warning message. One other thing to notice is that I have named the code chunks like message-example. This is good practice because it makes hoping around the document a little bit easier. Because it will say failed something to the effect of quitting on line 12-20 code-for-fig-1. Which will let you navigate there a bit easier."
  },
  {
    "objectID": "quarto-basics.html#footnotes",
    "href": "quarto-basics.html#footnotes",
    "title": "4  Writing in Quarto",
    "section": "",
    "text": "Yes this is really what it is called. Some sites use TOML which is an acronym for Tom’s Obvious, Minimal Language. Much like political scientists once a joke in a title gets started it is doomed to be repeated.↩︎"
  },
  {
    "objectID": "04-wrangling-data-with-the-tidyverse.html#dplyr",
    "href": "04-wrangling-data-with-the-tidyverse.html#dplyr",
    "title": "5  Intro to the tidyverse",
    "section": "5.1 dplyr",
    "text": "5.1 dplyr\n\n\n\n\n\n\n“Happy families are all alike; every unhappy family is unhappy in its own way.” - Leon Tolstoy.\n\n\n\nData is often talked about the in the same way. All clean datasets are alike in structure and dignity. Every messy dataset is messy in its own special way.\ndplyr is the tidyverse way to manipulate data and an all around great package. But you need to get the basic functions right. Cleaning data is what you will spend the most time on.\nWe will use the palmerpenguins and the starwars dataset to demonstrate how to use the verbs in dplyr\n\ndata(\"starwars\")\nlibrary(palmerpenguins)\n\n\n5.1.1 select\nSelect is the most intuitive. Select picks out the columns you want or, in some cases, do not want. If we only want the name of the character and the place they are from we feed that name of the columns into select. If you are following along and copying and pasting the code in the guide to see what is going on you may notice that your output differs slightly. That is because behind the scenes I am just using select to cut down on the output.\n\nselect(starwars, name, homeworld)\n\n\n\n\n\n\nname\nhomeworld\n\n\n\n\nLuke Skywalker\nTatooine\n\n\nC-3PO\nTatooine\n\n\nR2-D2\nNaboo\n\n\nDarth Vader\nTatooine\n\n\nLeia Organa\nAlderaan\n\n\n\n\n\n\n\nIf we wanted all the columns except for name and homeworld we would do this.\n\nselect(starwars, -name, -homeworld)\n\n\n\n\n\n\nheight\nmass\nhair_color\nskin_color\neye_color\nstarships\n\n\n\n\n172\n77\nblond\nfair\nblue\nX-wing , Imperial shuttle\n\n\n167\n75\nNA\ngold\nyellow\n\n\n\n96\n32\nNA\nwhite, blue\nred\n\n\n\n202\n136\nnone\nwhite\nyellow\nTIE Advanced x1\n\n\n150\n49\nbrown\nlight\nbrown\n\n\n\n\n\n\n\n\nWe can also feed it a range of columns using :\n\nselect(starwars, name:hair_color)\n\n\n\n\n\n\nname\nheight\nmass\nhair_color\n\n\n\n\nLuke Skywalker\n172\n77\nblond\n\n\nC-3PO\n167\n75\nNA\n\n\nR2-D2\n96\n32\nNA\n\n\nDarth Vader\n202\n136\nnone\n\n\nLeia Organa\n150\n49\nbrown\n\n\n\n\n\n\n\n\n\n5.1.2 filter\nFilter is how we subset by rows. To do this we need to tell filter what rows we want! This feels like it should be intuitive, but we have to use some concepts that are likely new to you. Lets say we want characters that are from a particular world in starwars. To do that we do this.\n\nfilter(starwars, homeworld == \"Naboo\") \n\n\n\n\n\n\nname\nhomeworld\n\n\n\n\nR2-D2\nNaboo\n\n\nPalpatine\nNaboo\n\n\nJar Jar Binks\nNaboo\n\n\nRoos Tarpals\nNaboo\n\n\nRugor Nass\nNaboo\n\n\n\n\n\n\n\nWhat we are doing here is just creating a dataset with just things from Naboo. We need to set tell R what rows we want by setting up some tests. Each time a row meets that condition then R is going to grab it. As a reminder these are the kinds of test you can do\n\n\n\n\nTest\n\n\nMeaning\n\n\nTest\n\n\nMeaning\n\n\n\n\nx &lt; y\n\n\nLess than\n\n\nx %in% y\n\n\nIn set\n\n\n\n\nx &gt; y\n\n\nGreater than\n\n\nis.na(x)\n\n\nIs missing\n\n\n\n\n==\n\n\nEqual to\n\n\n!is.na(x)\n\n\nIs not missing\n\n\n\n\nx &lt;= y\n\n\nLess than or equal to\n\n\n\n\n ! y\n\n\nNot\n\n\n\n\nx &gt;= y\n\n\nGreater than or equal to\n\n\n\n\nx != y\n\n\nNot equal to\n\n\n\n\nx | y\n\n\nOr\n\n\n\n\nx & y\n\n\nAnd\n\n\n\n\nSo lets return back to our Naboo example. If we wanted to reuse this dataset later we would assign it to an object using &lt;- so lets assign it to an object named naboo\n\nnaboo &lt;- filter(starwars, homeworld == \"Naboo\") \n\nWe can also combine multiple tests in filter. Lets say we wanted to all the characters that are from Naboo and are human\n\n filter(starwars, homeworld == \"Naboo\" & species == \"Human\")\n\n\n\n\n\n\nname\nspecies\nhomeworld\n\n\n\n\nPalpatine\nHuman\nNaboo\n\n\nGregar Typho\nHuman\nNaboo\n\n\nCordé\nHuman\nNaboo\n\n\nDormé\nHuman\nNaboo\n\n\nPadmé Amidala\nHuman\nNaboo\n\n\n\n\n\n\n\nNow we have all the characters that are from Naboo and are human! Filter automatically defaults to an and test. So these produce the same behavior.\n\nfilter(starwars, homeworld == \"Naboo\" & species == \"Human\") \n\nfilter(starwars, homeworld == \"Naboo\", species == \"Human\")\n\n\n\n\n\n\nname\nhomeworld\nspecies\n\n\n\n\nPalpatine\nNaboo\nHuman\n\n\nGregar Typho\nNaboo\nHuman\n\n\nCordé\nNaboo\nHuman\n\n\nDormé\nNaboo\nHuman\n\n\nPadmé Amidala\nNaboo\nHuman\n\n\n\n\n\n\n\n\n\n\nname\nhomeworld\nspecies\n\n\n\n\nPalpatine\nNaboo\nHuman\n\n\nGregar Typho\nNaboo\nHuman\n\n\nCordé\nNaboo\nHuman\n\n\nDormé\nNaboo\nHuman\n\n\nPadmé Amidala\nNaboo\nHuman\n\n\n\n\n\n\n\nIf we wanted characters from two different homeworlds we would do an or test using | (the key above enter/return)\n\nfilter(starwars, homeworld == \"Naboo\" | homeworld == \"Tatooine\")\n\n\n\n\n\n\nname\nhomeworld\n\n\n\n\nLuke Skywalker\nTatooine\n\n\nC-3PO\nTatooine\n\n\nR2-D2\nNaboo\n\n\nDarth Vader\nTatooine\n\n\nOwen Lars\nTatooine\n\n\n\n\n\n\n\nThe reason we would use an or test is because one character can’t have two homeworlds! Remember, computers are dumb. As long as the code can run, it will do it. So if we use an and test, this is what it returns\n\nfilter(starwars, homeworld == \"Naboo\" & homeworld == \"Tatooine\")\n\n# A tibble: 0 × 14\n# ℹ 14 variables: name &lt;chr&gt;, height &lt;int&gt;, mass &lt;dbl&gt;, hair_color &lt;chr&gt;,\n#   skin_color &lt;chr&gt;, eye_color &lt;chr&gt;, birth_year &lt;dbl&gt;, sex &lt;chr&gt;,\n#   gender &lt;chr&gt;, homeworld &lt;chr&gt;, species &lt;chr&gt;, films &lt;list&gt;,\n#   vehicles &lt;list&gt;, starships &lt;list&gt;\n\n\nWhen working with things in R stray commas and spelling will lead to headaches. Here is an example that would not throw an error but will create a dataframe with zero observations. Naboo exists as a value of homeworld, but naboo does not.\n\n naboo &lt;- filter(starwars, homeworld == \"naboo\")\n\nnaboo &lt;- filter(starwars, homeworld == \"Naboo\",)\n\nFilter also works if you want particular values of something. Let’s say we want penguins with longer flippers or characters less than a certain height. We can do that with filter.\n\nfilter(starwars, height &lt; mean(height, na.rm = TRUE))\n\nfilter(penguins, flipper_length_mm &gt; 2)\n\n\n\n\n\n\nname\nheight\nspecies\n\n\n\n\nLuke Skywalker\n172\nHuman\n\n\nC-3PO\n167\nDroid\n\n\nR2-D2\n96\nDroid\n\n\nLeia Organa\n150\nHuman\n\n\nBeru Whitesun lars\n165\nHuman\n\n\n\n\n\n\n\n\n\n\nspecies\nflipper_length_mm\n\n\n\n\nAdelie\n181\n\n\nAdelie\n186\n\n\nAdelie\n195\n\n\nAdelie\n193\n\n\nAdelie\n190\n\n\n\n\n\n\n\nSometimes we want a dataset that does not have any missing values in it for a particular column. In this case all we do is just add ! in front of the is.na function.\n\nfilter(starwars, !is.na(height))\n\n\n\n\n\n\nname\nheight\nmass\nhair_color\nskin_color\neye_color\n\n\n\n\nLuke Skywalker\n172\n77\nblond\nfair\nblue\n\n\nC-3PO\n167\n75\nNA\ngold\nyellow\n\n\nR2-D2\n96\n32\nNA\nwhite, blue\nred\n\n\nDarth Vader\n202\n136\nnone\nwhite\nyellow\n\n\nLeia Organa\n150\n49\nbrown\nlight\nbrown\n\n\n\n\n\n\n\nWe would do something similar if we wanted characters that are not human!\n\nfilter(starwars, species != \"Human\")\n\n\n\n\n\n\nname\nheight\nmass\nhair_color\nskin_color\neye_color\nbirth_year\nsex\ngender\nhomeworld\nspecies\nfilms\nvehicles\nstarships\n\n\n\n\nC-3PO\n167\n75\nNA\ngold\nyellow\n112\nnone\nmasculine\nTatooine\nDroid\nThe Empire Strikes Back, Attack of the Clones , The Phantom Menace , Revenge of the Sith , Return of the Jedi , A New Hope\n\n\n\n\nR2-D2\n96\n32\nNA\nwhite, blue\nred\n33\nnone\nmasculine\nNaboo\nDroid\nThe Empire Strikes Back, Attack of the Clones , The Phantom Menace , Revenge of the Sith , Return of the Jedi , A New Hope , The Force Awakens\n\n\n\n\nR5-D4\n97\n32\nNA\nwhite, red\nred\nNA\nnone\nmasculine\nTatooine\nDroid\nA New Hope\n\n\n\n\nChewbacca\n228\n112\nbrown\nunknown\nblue\n200\nmale\nmasculine\nKashyyyk\nWookiee\nThe Empire Strikes Back, Revenge of the Sith , Return of the Jedi , A New Hope , The Force Awakens\nAT-ST\nMillennium Falcon, Imperial shuttle\n\n\nGreedo\n173\n74\nNA\ngreen\nblack\n44\nmale\nmasculine\nRodia\nRodian\nA New Hope\n\n\n\n\n\n\n\n\n\nOne last operator that I will show you is the %in% operator. This comes in really handy for lots of things. Intuitively we can think about it as a bunch of thing == \"value\"| thing == “value”` tests glued together. Lets say we wanted all the characters from Tatooine, Naboo, and “Coruscant”. With what we know we would do something like this.\n\nfilter(starwars, homeworld == \"Naboo\" | homeworld == \"Coruscant\" | homeworld == \"Tatooine\")\n\nWhile not the most amount of typing in the world this can quickly get to be a lot if there is a bunch of mutually exclusive things we need to subset our data by. This is where the %in%operator comes in to save us! We can rewrite this series of or tests like this\n\nfilter(starwars, homeworld %in% c(\"Naboo\", \"Coruscant\", \"Tatooine\"))\n\n\n\n\n\n\nname\nhomeworld\n\n\n\n\nLuke Skywalker\nTatooine\n\n\nAnakin Skywalker\nTatooine\n\n\nFinis Valorum\nCoruscant\n\n\nShmi Skywalker\nTatooine\n\n\nAdi Gallia\nCoruscant\n\n\nJocasta Nu\nCoruscant\n\n\nPadmé Amidala\nNaboo\n\n\n\n\n\n\n\n\n\nI have done some additional filtering behind the scenes to show you that it worked so your dataset likely looks a little different.\nNotice how the test works. The first thing is the name of the variable and the second is the stuff the homeworlds. What R is doing is taking the values of the homeworld variable for each row and seeing if they match whats on the right hand side of %in. Kind of like this\n\n5 %in% 1:10\n\n[1] TRUE\n\n\nIf we wanted all things outside of this subset we can do this\n\nfilter(starwars, !homeworld %in% c(\"Naboo\", \"Coruscant\", \"Tatooine\"))\n\n\n\n\n\n\nname\nhomeworld\n\n\n\n\nLeia Organa\nAlderaan\n\n\nObi-Wan Kenobi\nStewjon\n\n\nWilhuff Tarkin\nEriadu\n\n\nChewbacca\nKashyyyk\n\n\nHan Solo\nCorellia\n\n\n\n\n\n\n\n\n\n5.1.3 mutate\nmutate is how we create new columns in our dataset. There are tons of things that we may need to do in order to create variables. So lets start with making what we know as an indicator variable. Lets say we want to create a variable that indicates whether a character is human or not. We use the ifelse function to do this. The first thing we need to do is name the column. Lets call this column human. We then need to tell R what values the human variable has. If we want to create an indicator variable we can use the ifelse function in R which kind of works like filter.\nifelse has a few components\n\nifelse(test, what it does if true, what it does if false)\n\nSo in our case if the species column has a value of “human” than it returns TRUE otherwise return FALSE.\n\nmutate(starwars, human = ifelse(species == \"Human\", TRUE, FALSE))\n\n\n\n\n\n\nname\nspecies\n\n\n\n\nLuke Skywalker\nHuman\n\n\nC-3PO\nDroid\n\n\nR2-D2\nDroid\n\n\nDarth Vader\nHuman\n\n\nLeia Organa\nHuman\n\n\n\n\n\n\n\nifelse is not just limited to TRUE or FALSE you can really put anything in there it is just easier if you do. Lets see a somewhat silly example with the palmerpenguins dataset\n\nmutate(penguins, big_peng = ifelse(body_mass_g &gt; mean(body_mass_g, na.rm = TRUE), \"Chonky penguin\", \"Not a Chonky penguin\"))\n\n\n\n\n\n\nbody_mass_g\nbig_peng\n\n\n\n\n3750\nNot a Chonky penguin\n\n\n3800\nNot a Chonky penguin\n\n\n3250\nNot a Chonky penguin\n\n\nNA\nNA\n\n\n3450\nNot a Chonky penguin\n\n\n\n\n\n\n\nR gives us a lot of flexibility to create all kinds of variables. So let’s make a column in our dataset where we see how old a character is in dog years with a description, so other people know what is going on.\n\nmutate(starwars,dog_years = paste(name, birth_year * 7, \"in dog years\")) \n\n\n\n\n\n\nname\ndog_years\n\n\n\n\nLuke Skywalker\nLuke Skywalker is 133 in dog years\n\n\nC-3PO\nC-3PO is 784 in dog years\n\n\nR2-D2\nR2-D2 is 231 in dog years\n\n\nDarth Vader\nDarth Vader is 293.3 in dog years\n\n\nLeia Organa\nLeia Organa is 133 in dog years\n\n\n\n\n\n\n\nmutate is order aware. So if you want to do something with that new variable, you can do that in the same mutate call. If you want to do multiple things in mutate, that is also easy.\n\nmutate(starwars, heightsqr = height^2,\n                 height_square_root = sqrt(heightsqr),\n                 human = ifelse(species == \"human\", TRUE, FALSE))\n\n\n\n\n\n\nspecies\nheight\nheightsqr\nheight_square_root\nhuman\n\n\n\n\nHuman\n172\n29584\n172\nFALSE\n\n\nDroid\n167\n27889\n167\nFALSE\n\n\nDroid\n96\n9216\n96\nFALSE\n\n\nHuman\n202\n40804\n202\nFALSE\n\n\nHuman\n150\n22500\n150\nFALSE\n\n\n\n\n\n\n\nThere are tons of different kinds of operations you can do with mutate! Each variable has different kinds of things you can and cannot do to them! If you want a more complete breakdown I suggest that you look at R4Ds chapters 13:18. For now we will set that aside.\n\n\n5.1.4 What if we want to do more than one thing at once?\nGenerally, data cleaning consists of multiple steps. Sometimes we need to subset our data only to include the columns we care about and make a new variable. We could use what is known as a nested function call like this.\n\nselect(mutate(starwars, human = ifelse(species == \"human\", TRUE, FALSE)), name, human)\n\n\n\n\n\n\nname\nhuman\n\n\n\n\nLuke Skywalker\nFALSE\n\n\nC-3PO\nFALSE\n\n\nR2-D2\nFALSE\n\n\nDarth Vader\nFALSE\n\n\nLeia Organa\nFALSE\n\n\n\n\n\n\n\nOr we could create an intermediate object named starwars_human_add and then select the columns we want from there. However, both these solutions are annoying and unintuitive. We use |&gt;, technically called a pipe, to combine multiple steps in our data-cleaning pipeline. However, you should read it as and then. The easiest way to think of the pipe when working through stuff is this way from Andrew Heiss using your morning routine.\n\n\nBehind the scenes, I have the |&gt; all over the place.\n\nme |&gt; \nwake_up(time = \"8.00am\") |&gt; \nget_out_of_bed(side = \"correct\") |&gt; \nget_dressed(pants = \"TRUE\", shirt = \"TRUE\") |&gt; \nleave_house(car = TRUE, bike = FALSE, MARTA = FALSE) |&gt; \nam_late(traffic = TRUE)\n\nThis works because of the shared logic of the tidyverse\n\nFilterSelectMutate\n\n\n\nfilter(.data = penguins, species == \"Gentoo\")\n\n# A tibble: 124 × 8\n   species island bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;           &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Gentoo  Biscoe           46.1          13.2               211        4500\n 2 Gentoo  Biscoe           50            16.3               230        5700\n 3 Gentoo  Biscoe           48.7          14.1               210        4450\n 4 Gentoo  Biscoe           50            15.2               218        5700\n 5 Gentoo  Biscoe           47.6          14.5               215        5400\n 6 Gentoo  Biscoe           46.5          13.5               210        4550\n 7 Gentoo  Biscoe           45.4          14.6               211        4800\n 8 Gentoo  Biscoe           46.7          15.3               219        5200\n 9 Gentoo  Biscoe           43.3          13.4               209        4400\n10 Gentoo  Biscoe           46.8          15.4               215        5150\n# ℹ 114 more rows\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n\nselect(.data = penguins, species:bill_length_mm)\n\n# A tibble: 344 × 3\n   species island    bill_length_mm\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;\n 1 Adelie  Torgersen           39.1\n 2 Adelie  Torgersen           39.5\n 3 Adelie  Torgersen           40.3\n 4 Adelie  Torgersen           NA  \n 5 Adelie  Torgersen           36.7\n 6 Adelie  Torgersen           39.3\n 7 Adelie  Torgersen           38.9\n 8 Adelie  Torgersen           39.2\n 9 Adelie  Torgersen           34.1\n10 Adelie  Torgersen           42  \n# ℹ 334 more rows\n\n\n\n\n\nmutate(.data = penguins, bill_length_mm_sq = bill_length_mm^2)\n\n# A tibble: 344 × 9\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 3 more variables: sex &lt;fct&gt;, year &lt;int&gt;, bill_length_mm_sq &lt;dbl&gt;\n\n\n\n\n\nNote how each verb has the .data argument in the first position. The pipe takes what’s on the left-hand side and evaluates it as the first argument on the right-hand side, so starwars |&gt; passes the Starwars as the first argument in mutate. This lets chain together multiple operations. In my opinion is easier to decipher than large nested function calls like the left column in favor of a cleaner, easier-to-read version of the code on the right.\n\n\n\n filter(mutate(penguins,\n  female = ifelse(sex == \"female\",\n    TRUE, FALSE)),\n     species == \"Adelie\")\n\n# A tibble: 152 × 9\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 3 more variables: sex &lt;fct&gt;, year &lt;int&gt;, female &lt;lgl&gt;\n\n\n\n\npenguins |&gt;\nfilter(species == \"Adelie\") |&gt;\nmutate(female = ifelse(sex == \"female\", TRUE, FALSE))\n\n# A tibble: 152 × 9\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 142 more rows\n# ℹ 3 more variables: sex &lt;fct&gt;, year &lt;int&gt;, female &lt;lgl&gt;\n\n\n\n\n\n\n\n\n\n\nThe tidyverse has its own pipe that looks like %&gt;%. This also works well. I use the pipe included in the latest versions of R. The keyboard shortcut for both is ctrl + shift + m in Windows and cmd + shift + m in Mac. To have the base R pipe appear go to `tools -&gt; global options -&gt; code -&gt; then click on use native pipe operator.\n\n\n\n\n\n5.1.5 group_by and summarize\nWe to use these two commands together because they are pretty well matched. group_by collapses data to a single row by a column or columns in our dataset. Think of this as collapsing our data into your unit of analysis. Like country or if you have panel data where we observe multiple countries over multiple years, we can use group_by to look at country and year. Summarize will let you pass a whole host of functions to get descriptive measures of the data.\n\n\nBoth the British English and American English spellings of summarize work the same. The main author and maintainer of dplyr and lots of other stuff in the tidyverse is from New Zealand so *R For Data Science` uses British spellings.\nImagine that we want to know the average height for each species. Using what you know about dplyr, you might write code like this with pipes.\n\nstarwars |&gt;\ngroup_by(species) |&gt;\nsummarise(mean(height))\n\n\n\n\n\n\nspecies\nmean(height)\n\n\n\n\nAleena\n79\n\n\nBesalisk\n198\n\n\nCerean\n198\n\n\nChagrian\n196\n\n\nClawdite\n168\n\n\n\n\n\n\n\nSometimes we want to count the number of species we have. There are many ways to do this in R. One of the most common you will see is.\n\nstarwars |&gt;\ngroup_by(species) |&gt;\nsummarise(n()) |&gt;\narrange(desc(`n()`))  # just sorts things from highest to lowest\n\n\n\n\n\n\nspecies\nn()\n\n\n\n\nHuman\n35\n\n\nDroid\n6\n\n\nNA\n4\n\n\nGungan\n3\n\n\nKaminoan\n2\n\n\n\n\n\n\n\nWe may also want to know the distinct number of species that live on each homeworld. One nice thing about lots of the tidyverse functions is that we can assign new names to stuff within the function. When you are naming stuff in summarize, you are just making a new variable as we do in mutate.\n\nstarwars |&gt;\ngroup_by(homeworld) |&gt;\nsummarise( distinct_species = n_distinct(species)) |&gt;\narrange(desc(distinct_species))\n\n\n\n\n\n\nhomeworld\ndistinct_species\n\n\n\n\nNaboo\n4\n\n\nNA\n4\n\n\nCoruscant\n2\n\n\nKamino\n2\n\n\nTatooine\n2"
  },
  {
    "objectID": "visualizing-data-with-ggplot2.html#continuous-vs.-discrete-in-ggplot2",
    "href": "visualizing-data-with-ggplot2.html#continuous-vs.-discrete-in-ggplot2",
    "title": "6  Data Vizsualization",
    "section": "6.1 Continuous vs. Discrete in ggplot2",
    "text": "6.1 Continuous vs. Discrete in ggplot2"
  },
  {
    "objectID": "visualizing-data-with-ggplot2.html#continuous-quantitative-or-numerical-data",
    "href": "visualizing-data-with-ggplot2.html#continuous-quantitative-or-numerical-data",
    "title": "6  Data Vizsualization",
    "section": "6.2 Continuous:quantitative or numerical data",
    "text": "6.2 Continuous:quantitative or numerical data\n\nheight\nweight\nage\ncounts"
  },
  {
    "objectID": "visualizing-data-with-ggplot2.html#discrete-qualitative-or-categorical-data",
    "href": "visualizing-data-with-ggplot2.html#discrete-qualitative-or-categorical-data",
    "title": "6  Data Vizsualization",
    "section": "6.3 Discrete:qualitative or categorical data",
    "text": "6.3 Discrete:qualitative or categorical data\n\nspecies\nsex\nstudy sites\nage group"
  },
  {
    "objectID": "visualizing-data-with-ggplot2.html#continuous-vs.-discrete-in-ggplot2-1",
    "href": "visualizing-data-with-ggplot2.html#continuous-vs.-discrete-in-ggplot2-1",
    "title": "6  Data Vizsualization",
    "section": "6.4 Continuous vs. Discrete in {ggplot2}",
    "text": "6.4 Continuous vs. Discrete in {ggplot2}"
  },
  {
    "objectID": "visualizing-data-with-ggplot2.html#continuous-quantitative-or-numerical-data-1",
    "href": "visualizing-data-with-ggplot2.html#continuous-quantitative-or-numerical-data-1",
    "title": "6  Data Vizsualization",
    "section": "6.5 Continuous:quantitative or numerical data",
    "text": "6.5 Continuous:quantitative or numerical data\n\nheight (continuous)\nweight (continuous)\nage (continuous or discrete)\ncounts (discrete)"
  },
  {
    "objectID": "visualizing-data-with-ggplot2.html#discrete-qualitative-or-categorical-data-1",
    "href": "visualizing-data-with-ggplot2.html#discrete-qualitative-or-categorical-data-1",
    "title": "6  Data Vizsualization",
    "section": "6.6 Discrete:qualitative or categorical data",
    "text": "6.6 Discrete:qualitative or categorical data\n\nspecies (nominal)\nsex (nominal)\nstudy site (nominal or ordinal)\nage group (ordinal)"
  },
  {
    "objectID": "01-installing-R-Rstudio.html#installing-rstudio",
    "href": "01-installing-R-Rstudio.html#installing-rstudio",
    "title": "2  Installing R",
    "section": "2.2 Installing Rstudio",
    "text": "2.2 Installing Rstudio\nSo now that we have installed R we should install Rstudio. Rstudio is simply a way to interact with R that is a lot more user friendly. You can google RStudio Desktop Download or you can simple click on this hyperlink and it will take you to the download page. Again just install the version of Rstudio that works with your operating system."
  },
  {
    "objectID": "quarto-basics.html#quarto",
    "href": "quarto-basics.html#quarto",
    "title": "4  Writing in Quarto",
    "section": "4.1 Quarto",
    "text": "4.1 Quarto\nIf you have read through the course syllabus you will notice that I am having you work in something called Quarto. You may be asking your self what is Quarto I have only used MS Word. Quarto embraces something called literate programming. Essentially what this means is that words and code appear side by side. This guide was created in Quarto and what I use the most. Since we are going to produce lots of graphs and tables in this class the typical workflow for that would look something like this\n\n\n\n\n\nCredit for this image goes to Bruno Rodrigues\n\n\n\n\nThis involves lots of work for yourself. If you are doing a data analysis project where you produce 5 plots each time you make minor changes to those plots you are going to have to remember where those plots are, copy and paste them over, resize them or reformat them. This gets infinitely more annoying if you are reporting numbers in tables or in text. In some cases data analysis teams are constantly updating reports for stake holders based on new data. So if you have a report that says our “based on our model we would expect an increase of 8 blah blahs” and later you rerun the analysis cuz there was new data or you notice a mistake you have to figure out where exactly you said “8 blah blahs” and switch them.\nIn Quarto this process is a whole lot easier. The loop looks like this\n\n\n\n\n\nCredit for this image goes to Bruno Rodrigues\n\n\n\n\nYou are changing the code for your figures in the document itself. So any changes are going to appear in the document automatically! You can also use code inline to automatically update numbers!\n\ndata &lt;- 1:100\n\navg &lt;- mean(data)\n\nThe average for our data is 50.5. In the document it looks like this\n\n```{r}\ndata &lt;- 1:100\n\navg &lt;- mean(data)\n\n```\n\nThe average of our data is `r avg`\nYou may have noticed that our data only goes from 1 to 100. We can make a quick modification and the document will update the document accordingly without any copy and pasting!\n\ndata &lt;- 1:1000\n\navg &lt;- mean(data)\n\nThe average of our data is 500.5"
  },
  {
    "objectID": "quarto-basics.html#installing-quarto",
    "href": "quarto-basics.html#installing-quarto",
    "title": "4  Writing in Quarto",
    "section": "4.2 Installing Quarto",
    "text": "4.2 Installing Quarto\nThe process is relatively straight forward. Just go to the Quarto website and click on the download button. This will install Quarto onto your machine so that is relatively straight forward!\nTo produce pdfs Quarto relies on something called \\(\\LaTeX\\). All you really need to know about \\(\\LaTeX\\) is that you need it to produce a PDF. To install LaTeX all you need to do is open an R script and copy and paste this code and run it and then type Y and hit enter.\n\n# if you are on a mac you need to just \n# delete the pound sign next to the install.packages() and run the code\n# install.packages(\"rstudioapi\")\nrstudioapi::terminalExecute(\n  command = \"quarto install tinytex\"\n)\n\nIt may prompt you to enter your password. This is just the password you use to log into your computer. Nothing will appear when you enter your password but your password is being entered. The reason your computer does this is for the same reason that websites do not display your password. This is installing a very minimal LaTeX distribution. After that is done you can now render PDFs.\nDo get the output we want we need to do some stuff in order to tell quarto what type of document we want. You add this information at the top of the document like you would with word. However, it looks a little bit different since it relies on YAML(Yet Another Markdown Language) to add in this info.1 Your YAML heading should look like this\ntitle: \"Quarto Guide\"\nauthor: \"Josh Allen\"\ndate:  \"08/22/23\"\nformat: pdf\nFrom there you can pass additional options to it like what the citation style, the citation engine, the kind of font you want to use etc. So it looks something like this.\ntitle: \"Quarto Guide\"\nauthor: \"Josh Allen\"\ndate: # \"08/22/23\" # this is to show you how to add the current date\nformat:\n  pdf:\n    toc: false # this turns off the table of contents\n    mainfont: \"Cochineal\" # the font I like\n    mainfontoptions: \n      - \"Numbers=Proportional\"\n      - \"Numbers=OldStyle\"\n    mathfont: \"Libertinus Math\"\n    indent: true\n    geometry: margin=1in # one inch margins \n    biblio-title: \"References\"\n    cite-method: biblatex\nfontsize: 12pt\nbibliography: ref.bib # specify the bib file \nbiblio-style: apsr # what style to choose"
  }
]